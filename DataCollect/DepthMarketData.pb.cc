// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DepthMarketData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DepthMarketData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* DepthMarketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepthMarketData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DepthMarketData_2eproto() {
  protobuf_AddDesc_DepthMarketData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DepthMarketData.proto");
  GOOGLE_CHECK(file != NULL);
  DepthMarketData_descriptor_ = file->message_type(0);
  static const int DepthMarketData_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, precloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, preopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, highestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, lowestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, upperlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, lowerlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, predelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, currdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, updatemillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, bidvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, askvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, averageprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, actionday_),
  };
  DepthMarketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepthMarketData_descriptor_,
      DepthMarketData::default_instance_,
      DepthMarketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepthMarketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepthMarketData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DepthMarketData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepthMarketData_descriptor_, &DepthMarketData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DepthMarketData_2eproto() {
  delete DepthMarketData::default_instance_;
  delete DepthMarketData_reflection_;
}

void protobuf_AddDesc_DepthMarketData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025DepthMarketData.proto\"\233\007\n\017DepthMarketD"
    "ata\022\022\n\nTradingDay\030\001 \001(\t\022\024\n\014InstrumentID\030"
    "\002 \001(\t\022\022\n\nExchangeID\030\003 \001(\t\022\026\n\016ExchangeIns"
    "tID\030\004 \001(\t\022\021\n\tLastPrice\030, \001(\001\022\032\n\022PreSettl"
    "ementPrice\030\005 \001(\001\022\025\n\rPreClosePrice\030\006 \001(\001\022"
    "\027\n\017PreOpenInterest\030\007 \001(\005\022\021\n\tOpenPrice\030\010 "
    "\001(\001\022\024\n\014HighestPrice\030\t \001(\001\022\023\n\013LowestPrice"
    "\030\n \001(\001\022\016\n\006Volume\030\013 \001(\005\022\020\n\010Turnover\030\014 \001(\001"
    "\022\024\n\014OpenInterest\030\r \001(\005\022\022\n\nClosePrice\030\016 \001"
    "(\001\022\027\n\017SettlementPrice\030\017 \001(\001\022\027\n\017UpperLimi"
    "tPrice\030\020 \001(\001\022\027\n\017LowerLimitPrice\030\021 \001(\001\022\020\n"
    "\010PreDelta\030\022 \001(\001\022\021\n\tCurrDelta\030\023 \001(\001\022\022\n\nUp"
    "dateTime\030\024 \001(\t\022\026\n\016UpdateMillisec\030\025 \001(\005\022\021"
    "\n\tBidPrice1\030\026 \001(\001\022\022\n\nBidVolume1\030\027 \001(\005\022\021\n"
    "\tAskPrice1\030\030 \001(\001\022\022\n\nAskVolume1\030\031 \001(\005\022\021\n\t"
    "BidPrice2\030\032 \001(\001\022\022\n\nBidVolume2\030\033 \001(\005\022\021\n\tA"
    "skPrice2\030\034 \001(\001\022\022\n\nAskVolume2\030\035 \001(\005\022\021\n\tBi"
    "dPrice3\030\036 \001(\001\022\022\n\nBidVolume3\030\037 \001(\005\022\021\n\tAsk"
    "Price3\030  \001(\001\022\022\n\nAskVolume3\030! \001(\005\022\021\n\tBidP"
    "rice4\030\" \001(\001\022\022\n\nBidVolume4\030# \001(\005\022\021\n\tAskPr"
    "ice4\030$ \001(\001\022\022\n\nAskVolume4\030% \001(\005\022\021\n\tBidPri"
    "ce5\030& \001(\001\022\022\n\nBidVolume5\030\' \001(\005\022\021\n\tAskPric"
    "e5\030( \001(\001\022\022\n\nAskVolume5\030) \001(\005\022\024\n\014AverageP"
    "rice\030* \001(\001\022\021\n\tActionDay\030+ \001(\t", 949);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DepthMarketData.proto", &protobuf_RegisterTypes);
  DepthMarketData::default_instance_ = new DepthMarketData();
  DepthMarketData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DepthMarketData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DepthMarketData_2eproto {
  StaticDescriptorInitializer_DepthMarketData_2eproto() {
    protobuf_AddDesc_DepthMarketData_2eproto();
  }
} static_descriptor_initializer_DepthMarketData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DepthMarketData::kTradingDayFieldNumber;
const int DepthMarketData::kInstrumentIDFieldNumber;
const int DepthMarketData::kExchangeIDFieldNumber;
const int DepthMarketData::kExchangeInstIDFieldNumber;
const int DepthMarketData::kLastPriceFieldNumber;
const int DepthMarketData::kPreSettlementPriceFieldNumber;
const int DepthMarketData::kPreClosePriceFieldNumber;
const int DepthMarketData::kPreOpenInterestFieldNumber;
const int DepthMarketData::kOpenPriceFieldNumber;
const int DepthMarketData::kHighestPriceFieldNumber;
const int DepthMarketData::kLowestPriceFieldNumber;
const int DepthMarketData::kVolumeFieldNumber;
const int DepthMarketData::kTurnoverFieldNumber;
const int DepthMarketData::kOpenInterestFieldNumber;
const int DepthMarketData::kClosePriceFieldNumber;
const int DepthMarketData::kSettlementPriceFieldNumber;
const int DepthMarketData::kUpperLimitPriceFieldNumber;
const int DepthMarketData::kLowerLimitPriceFieldNumber;
const int DepthMarketData::kPreDeltaFieldNumber;
const int DepthMarketData::kCurrDeltaFieldNumber;
const int DepthMarketData::kUpdateTimeFieldNumber;
const int DepthMarketData::kUpdateMillisecFieldNumber;
const int DepthMarketData::kBidPrice1FieldNumber;
const int DepthMarketData::kBidVolume1FieldNumber;
const int DepthMarketData::kAskPrice1FieldNumber;
const int DepthMarketData::kAskVolume1FieldNumber;
const int DepthMarketData::kBidPrice2FieldNumber;
const int DepthMarketData::kBidVolume2FieldNumber;
const int DepthMarketData::kAskPrice2FieldNumber;
const int DepthMarketData::kAskVolume2FieldNumber;
const int DepthMarketData::kBidPrice3FieldNumber;
const int DepthMarketData::kBidVolume3FieldNumber;
const int DepthMarketData::kAskPrice3FieldNumber;
const int DepthMarketData::kAskVolume3FieldNumber;
const int DepthMarketData::kBidPrice4FieldNumber;
const int DepthMarketData::kBidVolume4FieldNumber;
const int DepthMarketData::kAskPrice4FieldNumber;
const int DepthMarketData::kAskVolume4FieldNumber;
const int DepthMarketData::kBidPrice5FieldNumber;
const int DepthMarketData::kBidVolume5FieldNumber;
const int DepthMarketData::kAskPrice5FieldNumber;
const int DepthMarketData::kAskVolume5FieldNumber;
const int DepthMarketData::kAveragePriceFieldNumber;
const int DepthMarketData::kActionDayFieldNumber;
#endif  // !_MSC_VER

DepthMarketData::DepthMarketData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DepthMarketData)
}

void DepthMarketData::InitAsDefaultInstance() {
}

DepthMarketData::DepthMarketData(const DepthMarketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DepthMarketData)
}

void DepthMarketData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastprice_ = 0;
  presettlementprice_ = 0;
  precloseprice_ = 0;
  preopeninterest_ = 0;
  openprice_ = 0;
  highestprice_ = 0;
  lowestprice_ = 0;
  volume_ = 0;
  turnover_ = 0;
  openinterest_ = 0;
  closeprice_ = 0;
  settlementprice_ = 0;
  upperlimitprice_ = 0;
  lowerlimitprice_ = 0;
  predelta_ = 0;
  currdelta_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  updatemillisec_ = 0;
  bidprice1_ = 0;
  bidvolume1_ = 0;
  askprice1_ = 0;
  askvolume1_ = 0;
  bidprice2_ = 0;
  bidvolume2_ = 0;
  askprice2_ = 0;
  askvolume2_ = 0;
  bidprice3_ = 0;
  bidvolume3_ = 0;
  askprice3_ = 0;
  askvolume3_ = 0;
  bidprice4_ = 0;
  bidvolume4_ = 0;
  askprice4_ = 0;
  askvolume4_ = 0;
  bidprice5_ = 0;
  bidvolume5_ = 0;
  askprice5_ = 0;
  askvolume5_ = 0;
  averageprice_ = 0;
  actionday_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepthMarketData::~DepthMarketData() {
  // @@protoc_insertion_point(destructor:DepthMarketData)
  SharedDtor();
}

void DepthMarketData::SharedDtor() {
  if (tradingday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradingday_;
  }
  if (instrumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instrumentid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exchangeinstid_;
  }
  if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete updatetime_;
  }
  if (actionday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete actionday_;
  }
  if (this != default_instance_) {
  }
}

void DepthMarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepthMarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepthMarketData_descriptor_;
}

const DepthMarketData& DepthMarketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DepthMarketData_2eproto();
  return *default_instance_;
}

DepthMarketData* DepthMarketData::default_instance_ = NULL;

DepthMarketData* DepthMarketData::New() const {
  return new DepthMarketData;
}

void DepthMarketData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DepthMarketData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lastprice_, precloseprice_);
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradingday_->clear();
      }
    }
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instrumentid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchangeid_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exchangeinstid_->clear();
      }
    }
    preopeninterest_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(openprice_, highestprice_);
    ZR_(volume_, settlementprice_);
    openinterest_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(upperlimitprice_, lowerlimitprice_);
    ZR_(updatemillisec_, currdelta_);
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        updatetime_->clear();
      }
    }
    bidprice1_ = 0;
    bidvolume1_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(askvolume1_, bidprice3_);
    askprice1_ = 0;
    bidvolume3_ = 0;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(askvolume3_, bidprice5_);
    askprice3_ = 0;
    bidvolume5_ = 0;
  }
  if (_has_bits_[40 / 32] & 3840) {
    ZR_(askvolume5_, averageprice_);
    askprice5_ = 0;
    if (has_actionday()) {
      if (actionday_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        actionday_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepthMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DepthMarketData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TradingDay = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradingday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_InstrumentID;
        break;
      }

      // optional string InstrumentID = 2;
      case 2: {
        if (tag == 18) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instrumentid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeID;
        break;
      }

      // optional string ExchangeID = 3;
      case 3: {
        if (tag == 26) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchangeid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ExchangeInstID;
        break;
      }

      // optional string ExchangeInstID = 4;
      case 4: {
        if (tag == 34) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exchangeinstid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_PreSettlementPrice;
        break;
      }

      // optional double PreSettlementPrice = 5;
      case 5: {
        if (tag == 41) {
         parse_PreSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_PreClosePrice;
        break;
      }

      // optional double PreClosePrice = 6;
      case 6: {
        if (tag == 49) {
         parse_PreClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precloseprice_)));
          set_has_precloseprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_PreOpenInterest;
        break;
      }

      // optional int32 PreOpenInterest = 7;
      case 7: {
        if (tag == 56) {
         parse_PreOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preopeninterest_)));
          set_has_preopeninterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_OpenPrice;
        break;
      }

      // optional double OpenPrice = 8;
      case 8: {
        if (tag == 65) {
         parse_OpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_HighestPrice;
        break;
      }

      // optional double HighestPrice = 9;
      case 9: {
        if (tag == 73) {
         parse_HighestPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highestprice_)));
          set_has_highestprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_LowestPrice;
        break;
      }

      // optional double LowestPrice = 10;
      case 10: {
        if (tag == 81) {
         parse_LowestPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowestprice_)));
          set_has_lowestprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Volume;
        break;
      }

      // optional int32 Volume = 11;
      case 11: {
        if (tag == 88) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_Turnover;
        break;
      }

      // optional double Turnover = 12;
      case 12: {
        if (tag == 97) {
         parse_Turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_OpenInterest;
        break;
      }

      // optional int32 OpenInterest = 13;
      case 13: {
        if (tag == 104) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_ClosePrice;
        break;
      }

      // optional double ClosePrice = 14;
      case 14: {
        if (tag == 113) {
         parse_ClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_SettlementPrice;
        break;
      }

      // optional double SettlementPrice = 15;
      case 15: {
        if (tag == 121) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_UpperLimitPrice;
        break;
      }

      // optional double UpperLimitPrice = 16;
      case 16: {
        if (tag == 129) {
         parse_UpperLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upperlimitprice_)));
          set_has_upperlimitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_LowerLimitPrice;
        break;
      }

      // optional double LowerLimitPrice = 17;
      case 17: {
        if (tag == 137) {
         parse_LowerLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowerlimitprice_)));
          set_has_lowerlimitprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_PreDelta;
        break;
      }

      // optional double PreDelta = 18;
      case 18: {
        if (tag == 145) {
         parse_PreDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predelta_)));
          set_has_predelta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_CurrDelta;
        break;
      }

      // optional double CurrDelta = 19;
      case 19: {
        if (tag == 153) {
         parse_CurrDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currdelta_)));
          set_has_currdelta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_UpdateTime;
        break;
      }

      // optional string UpdateTime = 20;
      case 20: {
        if (tag == 162) {
         parse_UpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "updatetime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_UpdateMillisec;
        break;
      }

      // optional int32 UpdateMillisec = 21;
      case 21: {
        if (tag == 168) {
         parse_UpdateMillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatemillisec_)));
          set_has_updatemillisec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_BidPrice1;
        break;
      }

      // optional double BidPrice1 = 22;
      case 22: {
        if (tag == 177) {
         parse_BidPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice1_)));
          set_has_bidprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_BidVolume1;
        break;
      }

      // optional int32 BidVolume1 = 23;
      case 23: {
        if (tag == 184) {
         parse_BidVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume1_)));
          set_has_bidvolume1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_AskPrice1;
        break;
      }

      // optional double AskPrice1 = 24;
      case 24: {
        if (tag == 193) {
         parse_AskPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice1_)));
          set_has_askprice1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_AskVolume1;
        break;
      }

      // optional int32 AskVolume1 = 25;
      case 25: {
        if (tag == 200) {
         parse_AskVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume1_)));
          set_has_askvolume1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_BidPrice2;
        break;
      }

      // optional double BidPrice2 = 26;
      case 26: {
        if (tag == 209) {
         parse_BidPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice2_)));
          set_has_bidprice2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_BidVolume2;
        break;
      }

      // optional int32 BidVolume2 = 27;
      case 27: {
        if (tag == 216) {
         parse_BidVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume2_)));
          set_has_bidvolume2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_AskPrice2;
        break;
      }

      // optional double AskPrice2 = 28;
      case 28: {
        if (tag == 225) {
         parse_AskPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice2_)));
          set_has_askprice2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_AskVolume2;
        break;
      }

      // optional int32 AskVolume2 = 29;
      case 29: {
        if (tag == 232) {
         parse_AskVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume2_)));
          set_has_askvolume2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_BidPrice3;
        break;
      }

      // optional double BidPrice3 = 30;
      case 30: {
        if (tag == 241) {
         parse_BidPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice3_)));
          set_has_bidprice3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_BidVolume3;
        break;
      }

      // optional int32 BidVolume3 = 31;
      case 31: {
        if (tag == 248) {
         parse_BidVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume3_)));
          set_has_bidvolume3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_AskPrice3;
        break;
      }

      // optional double AskPrice3 = 32;
      case 32: {
        if (tag == 257) {
         parse_AskPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice3_)));
          set_has_askprice3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_AskVolume3;
        break;
      }

      // optional int32 AskVolume3 = 33;
      case 33: {
        if (tag == 264) {
         parse_AskVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume3_)));
          set_has_askvolume3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_BidPrice4;
        break;
      }

      // optional double BidPrice4 = 34;
      case 34: {
        if (tag == 273) {
         parse_BidPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice4_)));
          set_has_bidprice4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_BidVolume4;
        break;
      }

      // optional int32 BidVolume4 = 35;
      case 35: {
        if (tag == 280) {
         parse_BidVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume4_)));
          set_has_bidvolume4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(289)) goto parse_AskPrice4;
        break;
      }

      // optional double AskPrice4 = 36;
      case 36: {
        if (tag == 289) {
         parse_AskPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice4_)));
          set_has_askprice4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_AskVolume4;
        break;
      }

      // optional int32 AskVolume4 = 37;
      case 37: {
        if (tag == 296) {
         parse_AskVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume4_)));
          set_has_askvolume4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_BidPrice5;
        break;
      }

      // optional double BidPrice5 = 38;
      case 38: {
        if (tag == 305) {
         parse_BidPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice5_)));
          set_has_bidprice5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_BidVolume5;
        break;
      }

      // optional int32 BidVolume5 = 39;
      case 39: {
        if (tag == 312) {
         parse_BidVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume5_)));
          set_has_bidvolume5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_AskPrice5;
        break;
      }

      // optional double AskPrice5 = 40;
      case 40: {
        if (tag == 321) {
         parse_AskPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice5_)));
          set_has_askprice5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_AskVolume5;
        break;
      }

      // optional int32 AskVolume5 = 41;
      case 41: {
        if (tag == 328) {
         parse_AskVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume5_)));
          set_has_askvolume5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(337)) goto parse_AveragePrice;
        break;
      }

      // optional double AveragePrice = 42;
      case 42: {
        if (tag == 337) {
         parse_AveragePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageprice_)));
          set_has_averageprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(346)) goto parse_ActionDay;
        break;
      }

      // optional string ActionDay = 43;
      case 43: {
        if (tag == 346) {
         parse_ActionDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actionday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->actionday().data(), this->actionday().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "actionday");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(353)) goto parse_LastPrice;
        break;
      }

      // optional double LastPrice = 44;
      case 44: {
        if (tag == 353) {
         parse_LastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DepthMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DepthMarketData)
  return false;
#undef DO_
}

void DepthMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DepthMarketData)
  // optional string TradingDay = 1;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradingday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tradingday(), output);
  }

  // optional string InstrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instrumentid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->instrumentid(), output);
  }

  // optional string ExchangeID = 3;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchangeid(), output);
  }

  // optional string ExchangeInstID = 4;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeinstid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->exchangeinstid(), output);
  }

  // optional double PreSettlementPrice = 5;
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->presettlementprice(), output);
  }

  // optional double PreClosePrice = 6;
  if (has_precloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->precloseprice(), output);
  }

  // optional int32 PreOpenInterest = 7;
  if (has_preopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->preopeninterest(), output);
  }

  // optional double OpenPrice = 8;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->openprice(), output);
  }

  // optional double HighestPrice = 9;
  if (has_highestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->highestprice(), output);
  }

  // optional double LowestPrice = 10;
  if (has_lowestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->lowestprice(), output);
  }

  // optional int32 Volume = 11;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->volume(), output);
  }

  // optional double Turnover = 12;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->turnover(), output);
  }

  // optional int32 OpenInterest = 13;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->openinterest(), output);
  }

  // optional double ClosePrice = 14;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->closeprice(), output);
  }

  // optional double SettlementPrice = 15;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->settlementprice(), output);
  }

  // optional double UpperLimitPrice = 16;
  if (has_upperlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->upperlimitprice(), output);
  }

  // optional double LowerLimitPrice = 17;
  if (has_lowerlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->lowerlimitprice(), output);
  }

  // optional double PreDelta = 18;
  if (has_predelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->predelta(), output);
  }

  // optional double CurrDelta = 19;
  if (has_currdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->currdelta(), output);
  }

  // optional string UpdateTime = 20;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updatetime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->updatetime(), output);
  }

  // optional int32 UpdateMillisec = 21;
  if (has_updatemillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->updatemillisec(), output);
  }

  // optional double BidPrice1 = 22;
  if (has_bidprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->bidprice1(), output);
  }

  // optional int32 BidVolume1 = 23;
  if (has_bidvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->bidvolume1(), output);
  }

  // optional double AskPrice1 = 24;
  if (has_askprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->askprice1(), output);
  }

  // optional int32 AskVolume1 = 25;
  if (has_askvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->askvolume1(), output);
  }

  // optional double BidPrice2 = 26;
  if (has_bidprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->bidprice2(), output);
  }

  // optional int32 BidVolume2 = 27;
  if (has_bidvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->bidvolume2(), output);
  }

  // optional double AskPrice2 = 28;
  if (has_askprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->askprice2(), output);
  }

  // optional int32 AskVolume2 = 29;
  if (has_askvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->askvolume2(), output);
  }

  // optional double BidPrice3 = 30;
  if (has_bidprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->bidprice3(), output);
  }

  // optional int32 BidVolume3 = 31;
  if (has_bidvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->bidvolume3(), output);
  }

  // optional double AskPrice3 = 32;
  if (has_askprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->askprice3(), output);
  }

  // optional int32 AskVolume3 = 33;
  if (has_askvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->askvolume3(), output);
  }

  // optional double BidPrice4 = 34;
  if (has_bidprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->bidprice4(), output);
  }

  // optional int32 BidVolume4 = 35;
  if (has_bidvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->bidvolume4(), output);
  }

  // optional double AskPrice4 = 36;
  if (has_askprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->askprice4(), output);
  }

  // optional int32 AskVolume4 = 37;
  if (has_askvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->askvolume4(), output);
  }

  // optional double BidPrice5 = 38;
  if (has_bidprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->bidprice5(), output);
  }

  // optional int32 BidVolume5 = 39;
  if (has_bidvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->bidvolume5(), output);
  }

  // optional double AskPrice5 = 40;
  if (has_askprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->askprice5(), output);
  }

  // optional int32 AskVolume5 = 41;
  if (has_askvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->askvolume5(), output);
  }

  // optional double AveragePrice = 42;
  if (has_averageprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->averageprice(), output);
  }

  // optional string ActionDay = 43;
  if (has_actionday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actionday().data(), this->actionday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actionday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      43, this->actionday(), output);
  }

  // optional double LastPrice = 44;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->lastprice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DepthMarketData)
}

::google::protobuf::uint8* DepthMarketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DepthMarketData)
  // optional string TradingDay = 1;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradingday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tradingday(), target);
  }

  // optional string InstrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instrumentid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }

  // optional string ExchangeID = 3;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeid(), target);
  }

  // optional string ExchangeInstID = 4;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exchangeinstid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeinstid(), target);
  }

  // optional double PreSettlementPrice = 5;
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->presettlementprice(), target);
  }

  // optional double PreClosePrice = 6;
  if (has_precloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->precloseprice(), target);
  }

  // optional int32 PreOpenInterest = 7;
  if (has_preopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->preopeninterest(), target);
  }

  // optional double OpenPrice = 8;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->openprice(), target);
  }

  // optional double HighestPrice = 9;
  if (has_highestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->highestprice(), target);
  }

  // optional double LowestPrice = 10;
  if (has_lowestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->lowestprice(), target);
  }

  // optional int32 Volume = 11;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->volume(), target);
  }

  // optional double Turnover = 12;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->turnover(), target);
  }

  // optional int32 OpenInterest = 13;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->openinterest(), target);
  }

  // optional double ClosePrice = 14;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->closeprice(), target);
  }

  // optional double SettlementPrice = 15;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->settlementprice(), target);
  }

  // optional double UpperLimitPrice = 16;
  if (has_upperlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->upperlimitprice(), target);
  }

  // optional double LowerLimitPrice = 17;
  if (has_lowerlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->lowerlimitprice(), target);
  }

  // optional double PreDelta = 18;
  if (has_predelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->predelta(), target);
  }

  // optional double CurrDelta = 19;
  if (has_currdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->currdelta(), target);
  }

  // optional string UpdateTime = 20;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "updatetime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->updatetime(), target);
  }

  // optional int32 UpdateMillisec = 21;
  if (has_updatemillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->updatemillisec(), target);
  }

  // optional double BidPrice1 = 22;
  if (has_bidprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->bidprice1(), target);
  }

  // optional int32 BidVolume1 = 23;
  if (has_bidvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->bidvolume1(), target);
  }

  // optional double AskPrice1 = 24;
  if (has_askprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->askprice1(), target);
  }

  // optional int32 AskVolume1 = 25;
  if (has_askvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->askvolume1(), target);
  }

  // optional double BidPrice2 = 26;
  if (has_bidprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->bidprice2(), target);
  }

  // optional int32 BidVolume2 = 27;
  if (has_bidvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->bidvolume2(), target);
  }

  // optional double AskPrice2 = 28;
  if (has_askprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->askprice2(), target);
  }

  // optional int32 AskVolume2 = 29;
  if (has_askvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->askvolume2(), target);
  }

  // optional double BidPrice3 = 30;
  if (has_bidprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->bidprice3(), target);
  }

  // optional int32 BidVolume3 = 31;
  if (has_bidvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->bidvolume3(), target);
  }

  // optional double AskPrice3 = 32;
  if (has_askprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->askprice3(), target);
  }

  // optional int32 AskVolume3 = 33;
  if (has_askvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->askvolume3(), target);
  }

  // optional double BidPrice4 = 34;
  if (has_bidprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->bidprice4(), target);
  }

  // optional int32 BidVolume4 = 35;
  if (has_bidvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->bidvolume4(), target);
  }

  // optional double AskPrice4 = 36;
  if (has_askprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->askprice4(), target);
  }

  // optional int32 AskVolume4 = 37;
  if (has_askvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->askvolume4(), target);
  }

  // optional double BidPrice5 = 38;
  if (has_bidprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->bidprice5(), target);
  }

  // optional int32 BidVolume5 = 39;
  if (has_bidvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->bidvolume5(), target);
  }

  // optional double AskPrice5 = 40;
  if (has_askprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->askprice5(), target);
  }

  // optional int32 AskVolume5 = 41;
  if (has_askvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->askvolume5(), target);
  }

  // optional double AveragePrice = 42;
  if (has_averageprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->averageprice(), target);
  }

  // optional string ActionDay = 43;
  if (has_actionday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->actionday().data(), this->actionday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "actionday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->actionday(), target);
  }

  // optional double LastPrice = 44;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->lastprice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DepthMarketData)
  return target;
}

int DepthMarketData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TradingDay = 1;
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }

    // optional string InstrumentID = 2;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }

    // optional string ExchangeID = 3;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }

    // optional string ExchangeInstID = 4;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }

    // optional double LastPrice = 44;
    if (has_lastprice()) {
      total_size += 2 + 8;
    }

    // optional double PreSettlementPrice = 5;
    if (has_presettlementprice()) {
      total_size += 1 + 8;
    }

    // optional double PreClosePrice = 6;
    if (has_precloseprice()) {
      total_size += 1 + 8;
    }

    // optional int32 PreOpenInterest = 7;
    if (has_preopeninterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preopeninterest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double OpenPrice = 8;
    if (has_openprice()) {
      total_size += 1 + 8;
    }

    // optional double HighestPrice = 9;
    if (has_highestprice()) {
      total_size += 1 + 8;
    }

    // optional double LowestPrice = 10;
    if (has_lowestprice()) {
      total_size += 1 + 8;
    }

    // optional int32 Volume = 11;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional double Turnover = 12;
    if (has_turnover()) {
      total_size += 1 + 8;
    }

    // optional int32 OpenInterest = 13;
    if (has_openinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openinterest());
    }

    // optional double ClosePrice = 14;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }

    // optional double SettlementPrice = 15;
    if (has_settlementprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double UpperLimitPrice = 16;
    if (has_upperlimitprice()) {
      total_size += 2 + 8;
    }

    // optional double LowerLimitPrice = 17;
    if (has_lowerlimitprice()) {
      total_size += 2 + 8;
    }

    // optional double PreDelta = 18;
    if (has_predelta()) {
      total_size += 2 + 8;
    }

    // optional double CurrDelta = 19;
    if (has_currdelta()) {
      total_size += 2 + 8;
    }

    // optional string UpdateTime = 20;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }

    // optional int32 UpdateMillisec = 21;
    if (has_updatemillisec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatemillisec());
    }

    // optional double BidPrice1 = 22;
    if (has_bidprice1()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume1 = 23;
    if (has_bidvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume1());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double AskPrice1 = 24;
    if (has_askprice1()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume1 = 25;
    if (has_askvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume1());
    }

    // optional double BidPrice2 = 26;
    if (has_bidprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume2 = 27;
    if (has_bidvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume2());
    }

    // optional double AskPrice2 = 28;
    if (has_askprice2()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume2 = 29;
    if (has_askvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume2());
    }

    // optional double BidPrice3 = 30;
    if (has_bidprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume3 = 31;
    if (has_bidvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume3());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double AskPrice3 = 32;
    if (has_askprice3()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume3 = 33;
    if (has_askvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume3());
    }

    // optional double BidPrice4 = 34;
    if (has_bidprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume4 = 35;
    if (has_bidvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume4());
    }

    // optional double AskPrice4 = 36;
    if (has_askprice4()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume4 = 37;
    if (has_askvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume4());
    }

    // optional double BidPrice5 = 38;
    if (has_bidprice5()) {
      total_size += 2 + 8;
    }

    // optional int32 BidVolume5 = 39;
    if (has_bidvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume5());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional double AskPrice5 = 40;
    if (has_askprice5()) {
      total_size += 2 + 8;
    }

    // optional int32 AskVolume5 = 41;
    if (has_askvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume5());
    }

    // optional double AveragePrice = 42;
    if (has_averageprice()) {
      total_size += 2 + 8;
    }

    // optional string ActionDay = 43;
    if (has_actionday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actionday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepthMarketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepthMarketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepthMarketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepthMarketData::MergeFrom(const DepthMarketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
    if (from.has_precloseprice()) {
      set_precloseprice(from.precloseprice());
    }
    if (from.has_preopeninterest()) {
      set_preopeninterest(from.preopeninterest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highestprice()) {
      set_highestprice(from.highestprice());
    }
    if (from.has_lowestprice()) {
      set_lowestprice(from.lowestprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_upperlimitprice()) {
      set_upperlimitprice(from.upperlimitprice());
    }
    if (from.has_lowerlimitprice()) {
      set_lowerlimitprice(from.lowerlimitprice());
    }
    if (from.has_predelta()) {
      set_predelta(from.predelta());
    }
    if (from.has_currdelta()) {
      set_currdelta(from.currdelta());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_updatemillisec()) {
      set_updatemillisec(from.updatemillisec());
    }
    if (from.has_bidprice1()) {
      set_bidprice1(from.bidprice1());
    }
    if (from.has_bidvolume1()) {
      set_bidvolume1(from.bidvolume1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_askprice1()) {
      set_askprice1(from.askprice1());
    }
    if (from.has_askvolume1()) {
      set_askvolume1(from.askvolume1());
    }
    if (from.has_bidprice2()) {
      set_bidprice2(from.bidprice2());
    }
    if (from.has_bidvolume2()) {
      set_bidvolume2(from.bidvolume2());
    }
    if (from.has_askprice2()) {
      set_askprice2(from.askprice2());
    }
    if (from.has_askvolume2()) {
      set_askvolume2(from.askvolume2());
    }
    if (from.has_bidprice3()) {
      set_bidprice3(from.bidprice3());
    }
    if (from.has_bidvolume3()) {
      set_bidvolume3(from.bidvolume3());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_askprice3()) {
      set_askprice3(from.askprice3());
    }
    if (from.has_askvolume3()) {
      set_askvolume3(from.askvolume3());
    }
    if (from.has_bidprice4()) {
      set_bidprice4(from.bidprice4());
    }
    if (from.has_bidvolume4()) {
      set_bidvolume4(from.bidvolume4());
    }
    if (from.has_askprice4()) {
      set_askprice4(from.askprice4());
    }
    if (from.has_askvolume4()) {
      set_askvolume4(from.askvolume4());
    }
    if (from.has_bidprice5()) {
      set_bidprice5(from.bidprice5());
    }
    if (from.has_bidvolume5()) {
      set_bidvolume5(from.bidvolume5());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_askprice5()) {
      set_askprice5(from.askprice5());
    }
    if (from.has_askvolume5()) {
      set_askvolume5(from.askvolume5());
    }
    if (from.has_averageprice()) {
      set_averageprice(from.averageprice());
    }
    if (from.has_actionday()) {
      set_actionday(from.actionday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepthMarketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthMarketData::CopyFrom(const DepthMarketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthMarketData::IsInitialized() const {

  return true;
}

void DepthMarketData::Swap(DepthMarketData* other) {
  if (other != this) {
    std::swap(tradingday_, other->tradingday_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(precloseprice_, other->precloseprice_);
    std::swap(preopeninterest_, other->preopeninterest_);
    std::swap(openprice_, other->openprice_);
    std::swap(highestprice_, other->highestprice_);
    std::swap(lowestprice_, other->lowestprice_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(upperlimitprice_, other->upperlimitprice_);
    std::swap(lowerlimitprice_, other->lowerlimitprice_);
    std::swap(predelta_, other->predelta_);
    std::swap(currdelta_, other->currdelta_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(updatemillisec_, other->updatemillisec_);
    std::swap(bidprice1_, other->bidprice1_);
    std::swap(bidvolume1_, other->bidvolume1_);
    std::swap(askprice1_, other->askprice1_);
    std::swap(askvolume1_, other->askvolume1_);
    std::swap(bidprice2_, other->bidprice2_);
    std::swap(bidvolume2_, other->bidvolume2_);
    std::swap(askprice2_, other->askprice2_);
    std::swap(askvolume2_, other->askvolume2_);
    std::swap(bidprice3_, other->bidprice3_);
    std::swap(bidvolume3_, other->bidvolume3_);
    std::swap(askprice3_, other->askprice3_);
    std::swap(askvolume3_, other->askvolume3_);
    std::swap(bidprice4_, other->bidprice4_);
    std::swap(bidvolume4_, other->bidvolume4_);
    std::swap(askprice4_, other->askprice4_);
    std::swap(askvolume4_, other->askvolume4_);
    std::swap(bidprice5_, other->bidprice5_);
    std::swap(bidvolume5_, other->bidvolume5_);
    std::swap(askprice5_, other->askprice5_);
    std::swap(askvolume5_, other->askvolume5_);
    std::swap(averageprice_, other->averageprice_);
    std::swap(actionday_, other->actionday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepthMarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepthMarketData_descriptor_;
  metadata.reflection = DepthMarketData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
